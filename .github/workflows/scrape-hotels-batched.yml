- name: Run scraper for batch
        id: run-scraper
        continue-on-error: true
        run: |
          BATCH_NUM=${{ steps.prep-batch.outputs.batch_num }}
          BATCH_SIZE=${{ github.event.inputs.batch_size || '10' }}
          
          # Calculate batch start position
          BATCH_START=$((BATCH_NUM * BATCH_SIZE))
          
          echo "Running scraper for batch $BATCH_NUM..."
          echo "Batch start: $BATCH_START, size: $BATCH_SIZE"
          
          # First, let's check what's in the scraper file
          echo "=== Checking scraper file ==="
          echo "Line 100 of aa_hotels_scraper.py:"
          sed -n '95,105p' aa_hotels_scraper.py || echo "Could not read lines"
          
          # Let's also check if there are any tab characters
          echo ""
          echo "=== Checking for tabs in scraper ==="
          if grep -P '\t' aa_hotels_scraper.py; then
            echo "WARNING: Found tab characters in scraper file!"
            echo "Converting tabs to spaces..."
            # Convert tabs to spaces
            expand -t 4 aa_hotels_scraper.py > aa_hotels_scraper_fixed.py
            mv aa_hotels_scraper_fixed.py aa_hotels_scraper.py
            echo "Tabs converted to spaces"
          else
            echo "No tabs found"
          fi
          
          # Run the scraper with correct arguments
          if python aa_hotels_scraper.py \
            --proxies formatted_proxies.txt \
            --cities cities_top200.txt \
            --batch-start ${BATCH_START} \
            --batch-size ${BATCH_SIZE} 2>&1 | tee scraper_batch_${BATCH_NUM}.log; then
            echo "Scraper completed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
            
            # The scraper saves to a fixed filename, so rename it
            if [ -f cheapest_10k_hotels_by_city.csv ]; then
              mv cheapest_10k_hotels_by_city.csv hotels_batch_${BATCH_NUM}.csv
              echo "Renamed output file to hotels_batch_${BATCH_NUM}.csv"
            fi
          else
            SCRAPER_EXIT=$?
            echo "Scraper failed with exit code $SCRAPER_EXIT"
            echo "status=failed" >> $GITHUB_OUTPUT
            
            # Show last 50 lines of error log
            echo "=== Last 50 lines of scraper log ==="
            tail -50 scraper_batch_${BATCH_NUM}.log || echo "No log file"
            
            # Create empty CSV with error message
            echo "City,Hotel,Price,Cost per Point,ProxyUsed,error_message" > hotels_batch_${BATCH_NUM}.csv
            echo "batch_${BATCH_NUM},,,,,Scraper failed" >> hotels_batch_${BATCH_NUM}.csv
          fi
          
          # Check if output file exists
          if [ -f hotels_batch_${BATCH_NUM}.csv ]; then
            echo "Output file created: $(wc -l < hotels_batch_${BATCH_NUM}.csv) lines"
            echo "Preview:"
            head -5 hotels_batch_${BATCH_NUM}.csv
          else
            echo "Warning: No output file created, creating empty one"
            echo "City,Hotel,Price,Cost per Point,ProxyUsed" > hotels_batch_${BATCH_NUM}.csv
            echo "batch_${BATCH_NUM},No data,0,0,none" >> hotels_batch_${BATCH_NUM}.csv
          fi
