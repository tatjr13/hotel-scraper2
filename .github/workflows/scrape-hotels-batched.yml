name: Scrape Hotels Debug

on:
  workflow_dispatch:
    inputs:
      test_batch_only:
        description: 'Run only one test batch for debugging'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  debug-single-batch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List repository files
        run: |
          echo "=== Repository Contents ==="
          ls -la
          echo ""
          echo "=== Python files ==="
          find . -name "*.py" -type f
          echo ""
          echo "=== Text files ==="
          find . -name "*.txt" -type f

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Install common scraping libraries
          pip install pandas requests beautifulsoup4 lxml selenium aiohttp
          
          # Check if requirements.txt exists
          if [ -f requirements.txt ]; then
            echo "=== requirements.txt contents ==="
            cat requirements.txt
            echo "=== Installing from requirements.txt ==="
            pip install -r requirements.txt
          else
            echo "No requirements.txt found"
          fi
          
          echo ""
          echo "=== Installed packages ==="
          pip freeze

      - name: Check scraper syntax
        run: |
          echo "=== Checking scraper file ==="
          if [ -f aa_hotels_scraper.py ]; then
            echo "✓ Scraper found"
            # Check syntax
            python -m py_compile aa_hotels_scraper.py && echo "✓ Syntax valid" || echo "✗ Syntax error!"
            
            # Show imports
            echo ""
            echo "=== Scraper imports (first 20 lines) ==="
            head -20 aa_hotels_scraper.py
            
            # Look for main or argparse
            echo ""
            echo "=== Checking for argparse usage ==="
            grep -n "argparse\|ArgumentParser\|parse_args" aa_hotels_scraper.py | head -10 || echo "No argparse found"
            
            echo ""
            echo "=== Checking for main function ==="
            grep -n "if __name__\|def main" aa_hotels_scraper.py | head -5 || echo "No main found"
          else
            echo "✗ aa_hotels_scraper.py NOT FOUND!"
          fi

      - name: Test scraper help
        continue-on-error: true
        run: |
          echo "=== Testing scraper help ==="
          python aa_hotels_scraper.py --help 2>&1 || echo "Help failed with exit code: $?"

      - name: Decrypt proxy file
        env:
          PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        run: |
          echo "=== Decrypting proxy file ==="
          if [ -f formatted_proxies.txt.enc ]; then
            if openssl enc -d -aes-256-cbc -pbkdf2 -in formatted_proxies.txt.enc -out formatted_proxies.txt -k "$PROXY_PASSWORD"; then
              echo "✓ Decryption successful"
              echo "Proxy file lines: $(wc -l < formatted_proxies.txt)"
              echo "First proxy format: $(head -1 formatted_proxies.txt | sed 's/[^:@]*:[^:@]*@[^:]*:/user:pass@host:/')"
            else
              echo "✗ Decryption failed!"
            fi
          else
            echo "✗ formatted_proxies.txt.enc not found!"
          fi

      - name: Check cities file
        run: |
          echo "=== Checking cities file ==="
          if [ -f cities_top200.txt ]; then
            echo "✓ Cities file found"
            echo "Total cities: $(wc -l < cities_top200.txt)"
            echo ""
            echo "First 10 cities:"
            head -10 cities_top200.txt
            echo ""
            echo "Last 5 cities:"
            tail -5 cities_top200.txt
          else
            echo "✗ cities_top200.txt not found!"
          fi

      - name: Create test batch
        run: |
          echo "=== Creating test batch ==="
          # Take first 3 cities for testing
          head -3 cities_top200.txt > test_cities.txt
          echo "Test cities:"
          cat test_cities.txt

      - name: Run scraper with full debugging
        run: |
          echo "=== Running scraper with debugging ==="
          
          # Create a wrapper script to capture all output
          cat > run_scraper_debug.py << 'EOF'
          import subprocess
          import sys
          import os
          
          # Set environment for debugging
          env = os.environ.copy()
          env['PYTHONUNBUFFERED'] = '1'
          
          # Command to run
          cmd = [
              sys.executable, 'aa_hotels_scraper.py',
              '--proxy-file', 'formatted_proxies.txt',
              '--city-file', 'test_cities.txt',
              '--output', 'test_output.csv',
              '--batch-num', '0'
          ]
          
          print(f"Running command: {' '.join(cmd)}")
          print("=" * 60)
          
          try:
              # Run with full output capture
              result = subprocess.run(
                  cmd,
                  capture_output=True,
                  text=True,
                  env=env,
                  timeout=300  # 5 minute timeout
              )
              
              print("STDOUT:")
              print(result.stdout)
              print("\nSTDERR:")
              print(result.stderr)
              print(f"\nExit code: {result.returncode}")
              
          except subprocess.TimeoutExpired:
              print("ERROR: Scraper timed out after 5 minutes!")
          except FileNotFoundError:
              print("ERROR: Could not find Python or scraper file!")
          except Exception as e:
              print(f"ERROR: {type(e).__name__}: {e}")
              import traceback
              traceback.print_exc()
          EOF
          
          python run_scraper_debug.py

      - name: Check output
        if: always()
        run: |
          echo "=== Checking for output files ==="
          
          # List all CSV files
          echo "CSV files in directory:"
          find . -name "*.csv" -type f -ls
          
          # Check test output
          if [ -f test_output.csv ]; then
            echo ""
            echo "✓ test_output.csv created!"
            echo "File size: $(wc -c < test_output.csv) bytes"
            echo "Line count: $(wc -l < test_output.csv) lines"
            echo ""
            echo "Contents:"
            cat test_output.csv
          else
            echo "✗ No test_output.csv created"
          fi
          
          # Check for any other output files
          echo ""
          echo "All files created/modified in last 5 minutes:"
          find . -type f -mmin -5 -ls

      - name: Alternative scraper test
        if: always()
        run: |
          echo "=== Testing different argument formats ==="
          
          # Test 1: Minimal arguments
          echo "Test 1: Minimal args"
          timeout 30 python aa_hotels_scraper.py test_cities.txt 2>&1 || echo "Exit: $?"
          
          echo ""
          echo "Test 2: Positional args"
          timeout 30 python aa_hotels_scraper.py test_cities.txt test_output2.csv 2>&1 || echo "Exit: $?"
          
          echo ""
          echo "Test 3: Without batch-num"
          timeout 30 python aa_hotels_scraper.py \
            --proxy-file formatted_proxies.txt \
            --city-file test_cities.txt \
            --output test_output3.csv 2>&1 || echo "Exit: $?"

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-output
          path: |
            *.csv
            *.log
            test_cities.txt
          retention-days: 7

      - name: Create summary
        if: always()
        run: |
          {
            echo "## Debug Summary"
            echo ""
            echo "### File Status"
            echo "- aa_hotels_scraper.py: $([ -f aa_hotels_scraper.py ] && echo '✓' || echo '✗')"
            echo "- cities_top200.txt: $([ -f cities_top200.txt ] && echo '✓' || echo '✗')"
            echo "- formatted_proxies.txt: $([ -f formatted_proxies.txt ] && echo '✓' || echo '✗')"
            echo "- test_output.csv: $([ -f test_output.csv ] && echo '✓' || echo '✗')"
            echo ""
            echo "### Key Findings"
            echo "Check the job logs for detailed error messages"
          } >> $GITHUB_STEP_SUMMARY
