import sys
import asyncio
import logging
from datetime import datetime, timedelta
from playwright.async_api import async_playwright

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def debug_single_city():
    # Test with one city
    test_city = sys.argv[1] if len(sys.argv) > 1 else "Dubai, UAE"
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=False,  # SET TO FALSE TO SEE WHAT'S HAPPENING
            args=['--disable-blink-features=AutomationControlled']
        )
        
        page = await browser.new_page()
        
        try:
            # Go to site
            print(f"Testing with city: {test_city}")
            await page.goto("https://www.aadvantagehotels.com/")
            await page.wait_for_timeout(5000)
            
            # Fill city
            print("Filling city...")
            city_input = page.locator('input[type="text"]').first
            await city_input.click()
            await city_input.fill(test_city)
            await page.wait_for_timeout(2000)
            
            # Click dropdown
            print("Clicking dropdown...")
            await page.keyboard.press('ArrowDown')
            await page.keyboard.press('Enter')
            await page.wait_for_timeout(2000)
            
            # Fill dates
            print("Filling dates...")
            checkin = datetime.now()
            checkout = checkin + timedelta(days=1)
            
            checkin_input = page.locator('input[placeholder*="check-in" i]').first
            await checkin_input.click()
            await checkin_input.fill(checkin.strftime("%m/%d/%Y"))
            
            checkout_input = page.locator('input[placeholder*="check-out" i]').first
            await checkout_input.click()
            await checkout_input.fill(checkout.strftime("%m/%d/%Y"))
            
            # Search
            print("Clicking search...")
            await page.locator('button:has-text("Search")').first.click()
            await page.wait_for_load_state('networkidle')
            await page.wait_for_timeout(5000)
            
            # Check URL
            print(f"Current URL: {page.url}")
            
            # Take screenshot
            await page.screenshot(path="debug_search_results.png")
            
            # Count what we see
            all_text = await page.inner_text('body')
            print(f"\nPage contains 'Earn 10,000 miles': {all_text.count('Earn 10,000 miles')}")
            print(f"Page contains 'Earn 10000 miles': {all_text.count('Earn 10000 miles')}")
            print(f"Page contains 'miles' total: {all_text.count('miles')}")
            
            # Try to find hotel cards with different selectors
            selectors_to_try = [
                '[data-testid*="hotel"]',
                '[class*="hotel-card"]',
                '[class*="property-card"]',
                'article',
                'div[class*="result"]',
                'div[class*="listing"]'
            ]
            
            for selector in selectors_to_try:
                count = await page.locator(selector).count()
                if count > 0:
                    print(f"Found {count} elements with selector: {selector}")
                    # Get text from first one
                    first_text = await page.locator(selector).first.inner_text()
                    print(f"First element text preview: {first_text[:200]}...")
            
            # Try the actual extraction
            hotels = await page.evaluate('''() => {
                const results = [];
                const cards = document.querySelectorAll('*');  // GET EVERYTHING
                
                let found10k = 0;
                for (const card of cards) {
                    const text = card.textContent || '';
                    if (text.includes('Earn 10,000 miles') || text.includes('Earn 10000 miles')) {
                        found10k++;
                        // Find the closest parent that might be a hotel card
                        let parent = card;
                        while (parent && parent.parentElement && !parent.className.includes('card') && !parent.className.includes('hotel')) {
                            parent = parent.parentElement;
                        }
                        
                        const parentText = parent.textContent || text;
                        console.log('Found 10K miles in element:', parentText.substring(0, 200));
                        
                        // Try to extract price
                        const priceMatch = parentText.match(/\$(\d+)/);
                        if (priceMatch) {
                            results.push({
                                text: parentText.substring(0, 300),
                                price: priceMatch[1]
                            });
                        }
                    }
                }
                
                console.log('Total elements with 10K miles:', found10k);
                return results;
            }''')
            
            print(f"\nExtracted {len(hotels)} hotels with prices")
            for h in hotels[:5]:  # Show first 5
                print(f"- Price ${h['price']}: {h['text'][:100]}...")
            
            await page.wait_for_timeout(30000)  # Keep browser open for 30 seconds to inspect
            
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(debug_single_city())
